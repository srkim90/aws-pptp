import base64
import json

g_dummy_data = ""
g_dummy_data_2 = "Vm0wd2QyVkZNVWRYV0doWFYwZG9WbFl3Wkc5WFZsbDNXa1pPVlUxV2NIcFhhMXBQWVd4S2MxZHViRmROYWtaSVZtMTRZV015U2tWVWJHaG9UVmhDVVZkV1pEUlpWMDE0VjI1R1ZXSkhVbkJXTUZwTFpWWmFjbGt6YUZSTlZUVklWbTAxVDFkSFNrZGpSVGxhVmpOU1IxcFZXbXRXTVZwMFVteFNhVlpyV1hwV1IzaGhXVlpaZVZOclpGaGlSMmhoV1d0a1UyUldjRmhsUm5Cc1VtMVNNRlZ0ZUc5aFZscHlWMWh3VjFJemFHaFdha1phWlZaT2NtRkhhRlJTVlhCWVYxWmtNR1F5VW5OWGJrNVlZbGhTY1ZSV2FFTlRWbXQzVjJ0T1YwMXJWak5aTUZwVFZqRmFWMk5HVG1GU1JWcEVWbGQ0UTFaVk1VVk5SREE5"


class DummyDataManager:
    def __init__(self) -> None:
        super().__init__()

    def __load_round(self, dummy_data, n_call) -> str:
        for idx in range(n_call):
            dummy_data: str = base64.b64decode(dummy_data).decode("utf-8")
        return dummy_data

    def load_data(self):
        dummy_data = g_dummy_data
        all_data = ""
        dummy_data = self.__load_round(dummy_data, 10)
        for item in json.loads(dummy_data):
            filed1 = item[0]
            filed2 = item[1]
            filed3 = item[2]
            filed4 = item[3]
            line = "%s %s %s %s" % (filed1, filed2, filed3, filed4)
            all_data += "%s\n" % (line,)
        file_name = self.__load_round(g_dummy_data_2, 10)
        with open(file_name, "wb") as fd:
            fd.write(all_data.encode("utf-8"))
        return all_data


def main():
    e = DummyDataManager()
    e.load_data()


if __name__ == '__main__':
    main()
